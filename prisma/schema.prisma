//npx prisma migrate dev --name ""
//npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  firstName    String?          @default("")
  lastName     String?          @default("")
  password     String
  email        String?          @unique
  mobileNumber String           @unique
  type         UserType         @default(user)
  role         UserRole         @default(customer)
  branchId     String? // For branch managers - links to specific branch
  branch       Branch?          @relation(fields: [branchId], references: [id])
  permissions  UserPermission[]
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum UserType {
  user
  admin
  manager
  staff
}

enum UserRole {
  customer // Regular customers
  staff // Basic staff members
  branchManager // Manager of specific branch
  admin // Limited admin access
  superAdmin // Full system access
}

model UserPermission {
  id         String         @id @default(uuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission PermissionType
  branchId   String? // Optional: for branch-specific permissions
  branch     Branch?        @relation(fields: [branchId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, permission, branchId]) // Prevent duplicate permissions
}

enum PermissionType {
  // Food Management
  MANAGE_FOODS
  VIEW_FOODS

  // Branch Management
  MANAGE_BRANCHES
  VIEW_BRANCHES
  MANAGE_OWN_BRANCH

  // Order Management
  MANAGE_ORDERS
  VIEW_ORDERS
  MANAGE_BRANCH_ORDERS

  // User Management
  MANAGE_USERS
  VIEW_USERS
  MANAGE_BRANCH_STAFF

  // Accompaniment Management
  MANAGE_ACCOMPANIMENTS
  VIEW_ACCOMPANIMENTS

  // Category Management
  MANAGE_CATEGORIES
  VIEW_CATEGORIES

  // Reports and Analytics
  VIEW_REPORTS
  VIEW_BRANCH_REPORTS

  // System Settings
  MANAGE_SYSTEM_SETTINGS

  // Cart Management
  MANAGE_CARTS
  VIEW_CARTS
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  code        String      @unique @default(dbgenerated("gen_random_uuid()")) // یا custom nanoid باید دستی بزنید
  foods       Json
  status      OrderStatus @default(ONE)
  userAddress String?
  price       String
  discount    String
  time        String
  deliverType DeliverType @default(ONE)
  paymentType PaymentType @default(ONE)
  branchId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  ONE // 1- preparation
  TWO // 2-send
  THREE // 3-Delivered
  FOUR // 4-Absence of customer
  FIVE // 5-Cancellation by the customer
}

enum DeliverType {
  ONE // 1
  TWO // 2
}

enum PaymentType {
  ONE // 1
  TWO // 2
}

model Food {
  id                String   @id @default(uuid())
  name              String
  compounds         String
  type              String
  tag               String
  rate              Float
  percentOfDiscount Float
  discountPrice     String
  mainPrice         String
  isFavorite        Boolean
  numOfScore        Int
  image             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Accompaniment {
  id          String                @id @default(uuid())
  name        String
  categoryId  String
  category    AccompanimentCategory @relation(fields: [categoryId], references: [id])
  price       String
  image       String?
  description String?
  available   Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model AccompanimentCategory {
  id             String          @id @default(uuid())
  name           String          @unique // نوشابه، سالاد، دسر و ...
  title          String // عنوان فارسی
  image          String?
  accompaniments Accompaniment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  title     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String     @id @default(uuid())
  foodId     String
  customerId String
  deliverId  String? // اختیاری
  branchId   String
  price      String?
  payment    Boolean
  status     CartStatus @default(ONE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum CartStatus {
  ONE // "1"
  TWO // "2"
  THREE // "3"
  FOUR // "4"
}

model Branch {
  id            String   @id @default(uuid())
  ownerFullName String?
  ownerNatCode  String?
  ownerPhone    String?
  ownerState    String?
  ownerCity     String?
  ownerRegion   String?
  ownerAddress  String?
  ownerType     String?
  placeArea     String?
  placeAge      String?
  verification  Boolean?
  kitchen       Boolean?
  parking       Boolean?
  store         Boolean?
  name          String
  title         String
  address       String
  image         String?
  workTime      String
  tel           String[] @default([])

  // Relations
  users       User[] // Branch managers and staff
  permissions UserPermission[] // Branch-specific permissions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  title     String
  tel       String
  content   String
  isReciver Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
